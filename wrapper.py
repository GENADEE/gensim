# autogenerated by leprobe.py

def handle_get(obj, attr_name):
    print('<get attr=%r>' % attr_name, end='')
    value = getattr(obj, attr_name)
    print('%r</get>' % value)
    return value


def handle_set(obj, attr_name, value):
    print('<set attr=%r>%r' % (attr_name, value), end='')
    setattr(obj, attr_name, value)
    print('</set>')


def handle_call(obj, meth_name, *args, **kwargs):
    print('<call name="%s">' % meth_name)
    if args:
        for a in args:
            print('<arg>%r</arg>' % a)
    if kwargs:
        for k, v in kwargs.items():
            print('<kwarg name=%r>%r</kwarg>' % (k, v))
    value = getattr(obj, meth_name)(*args, **kwargs)
    print('<retval>%r</retval>' % value)
    print('</call>')
    return value


class Wrapper:
    def __init__(self, model):
        self._model = model

    def _leprobe_get_alpha(self):
        return handle_get(self._model, 'alpha')

    def _leprobe_set_alpha(self, value):
        handle_set(self._model, 'alpha', value)

    alpha = property(_leprobe_get_alpha, _leprobe_set_alpha)

    def _leprobe_get_batch_words(self):
        return handle_get(self._model, 'batch_words')

    def _leprobe_set_batch_words(self, value):
        handle_set(self._model, 'batch_words', value)

    batch_words = property(_leprobe_get_batch_words, _leprobe_set_batch_words)

    def _leprobe_get_bucket(self):
        return handle_get(self._model, 'bucket')

    def _leprobe_set_bucket(self, value):
        handle_set(self._model, 'bucket', value)

    bucket = property(_leprobe_get_bucket, _leprobe_set_bucket)

    def _leprobe_get_callbacks(self):
        return handle_get(self._model, 'callbacks')

    def _leprobe_set_callbacks(self, value):
        handle_set(self._model, 'callbacks', value)

    callbacks = property(_leprobe_get_callbacks, _leprobe_set_callbacks)

    def _leprobe_get_cbow_mean(self):
        return handle_get(self._model, 'cbow_mean')

    def _leprobe_set_cbow_mean(self, value):
        handle_set(self._model, 'cbow_mean', value)

    cbow_mean = property(_leprobe_get_cbow_mean, _leprobe_set_cbow_mean)

    def _leprobe_get_compute_loss(self):
        return handle_get(self._model, 'compute_loss')

    def _leprobe_set_compute_loss(self, value):
        handle_set(self._model, 'compute_loss', value)

    compute_loss = property(_leprobe_get_compute_loss, _leprobe_set_compute_loss)

    def _leprobe_get_corpus_count(self):
        return handle_get(self._model, 'corpus_count')

    def _leprobe_set_corpus_count(self, value):
        handle_set(self._model, 'corpus_count', value)

    corpus_count = property(_leprobe_get_corpus_count, _leprobe_set_corpus_count)

    def _leprobe_get_corpus_total_words(self):
        return handle_get(self._model, 'corpus_total_words')

    def _leprobe_set_corpus_total_words(self, value):
        handle_set(self._model, 'corpus_total_words', value)

    corpus_total_words = property(_leprobe_get_corpus_total_words, _leprobe_set_corpus_total_words)

    def _leprobe_get_cum_table(self):
        return handle_get(self._model, 'cum_table')

    def _leprobe_set_cum_table(self, value):
        handle_set(self._model, 'cum_table', value)

    cum_table = property(_leprobe_get_cum_table, _leprobe_set_cum_table)

    def _leprobe_get_epochs(self):
        return handle_get(self._model, 'epochs')

    def _leprobe_set_epochs(self, value):
        handle_set(self._model, 'epochs', value)

    epochs = property(_leprobe_get_epochs, _leprobe_set_epochs)

    def _leprobe_get_hs(self):
        return handle_get(self._model, 'hs')

    def _leprobe_set_hs(self, value):
        handle_set(self._model, 'hs', value)

    hs = property(_leprobe_get_hs, _leprobe_set_hs)

    def _leprobe_get_iter(self):
        return handle_get(self._model, 'iter')

    def _leprobe_set_iter(self, value):
        handle_set(self._model, 'iter', value)

    iter = property(_leprobe_get_iter, _leprobe_set_iter)

    def _leprobe_get_layer1_size(self):
        return handle_get(self._model, 'layer1_size')

    def _leprobe_set_layer1_size(self, value):
        handle_set(self._model, 'layer1_size', value)

    layer1_size = property(_leprobe_get_layer1_size, _leprobe_set_layer1_size)

    def _leprobe_get_max_n(self):
        return handle_get(self._model, 'max_n')

    def _leprobe_set_max_n(self, value):
        handle_set(self._model, 'max_n', value)

    max_n = property(_leprobe_get_max_n, _leprobe_set_max_n)

    def _leprobe_get_min_alpha(self):
        return handle_get(self._model, 'min_alpha')

    def _leprobe_set_min_alpha(self, value):
        handle_set(self._model, 'min_alpha', value)

    min_alpha = property(_leprobe_get_min_alpha, _leprobe_set_min_alpha)

    def _leprobe_get_min_alpha_yet_reached(self):
        return handle_get(self._model, 'min_alpha_yet_reached')

    def _leprobe_set_min_alpha_yet_reached(self, value):
        handle_set(self._model, 'min_alpha_yet_reached', value)

    min_alpha_yet_reached = property(_leprobe_get_min_alpha_yet_reached, _leprobe_set_min_alpha_yet_reached)

    def _leprobe_get_min_count(self):
        return handle_get(self._model, 'min_count')

    def _leprobe_set_min_count(self, value):
        handle_set(self._model, 'min_count', value)

    min_count = property(_leprobe_get_min_count, _leprobe_set_min_count)

    def _leprobe_get_min_n(self):
        return handle_get(self._model, 'min_n')

    def _leprobe_set_min_n(self, value):
        handle_set(self._model, 'min_n', value)

    min_n = property(_leprobe_get_min_n, _leprobe_set_min_n)

    def _leprobe_get_model_trimmed_post_training(self):
        return handle_get(self._model, 'model_trimmed_post_training')

    def _leprobe_set_model_trimmed_post_training(self, value):
        handle_set(self._model, 'model_trimmed_post_training', value)

    model_trimmed_post_training = property(_leprobe_get_model_trimmed_post_training, _leprobe_set_model_trimmed_post_training)

    def _leprobe_get_negative(self):
        return handle_get(self._model, 'negative')

    def _leprobe_set_negative(self, value):
        handle_set(self._model, 'negative', value)

    negative = property(_leprobe_get_negative, _leprobe_set_negative)

    def _leprobe_get_ns_exponent(self):
        return handle_get(self._model, 'ns_exponent')

    def _leprobe_set_ns_exponent(self, value):
        handle_set(self._model, 'ns_exponent', value)

    ns_exponent = property(_leprobe_get_ns_exponent, _leprobe_set_ns_exponent)

    def _leprobe_get_num_ngram_vectors(self):
        return handle_get(self._model, 'num_ngram_vectors')

    def _leprobe_set_num_ngram_vectors(self, value):
        handle_set(self._model, 'num_ngram_vectors', value)

    num_ngram_vectors = property(_leprobe_get_num_ngram_vectors, _leprobe_set_num_ngram_vectors)

    def _leprobe_get_random(self):
        return handle_get(self._model, 'random')

    def _leprobe_set_random(self, value):
        handle_set(self._model, 'random', value)

    random = property(_leprobe_get_random, _leprobe_set_random)

    def _leprobe_get_running_training_loss(self):
        return handle_get(self._model, 'running_training_loss')

    def _leprobe_set_running_training_loss(self, value):
        handle_set(self._model, 'running_training_loss', value)

    running_training_loss = property(_leprobe_get_running_training_loss, _leprobe_set_running_training_loss)

    def _leprobe_get_sample(self):
        return handle_get(self._model, 'sample')

    def _leprobe_set_sample(self, value):
        handle_set(self._model, 'sample', value)

    sample = property(_leprobe_get_sample, _leprobe_set_sample)

    def _leprobe_get_sg(self):
        return handle_get(self._model, 'sg')

    def _leprobe_set_sg(self, value):
        handle_set(self._model, 'sg', value)

    sg = property(_leprobe_get_sg, _leprobe_set_sg)

    def _leprobe_get_syn0_lockf(self):
        return handle_get(self._model, 'syn0_lockf')

    def _leprobe_set_syn0_lockf(self, value):
        handle_set(self._model, 'syn0_lockf', value)

    syn0_lockf = property(_leprobe_get_syn0_lockf, _leprobe_set_syn0_lockf)

    def _leprobe_get_syn0_ngrams_lockf(self):
        return handle_get(self._model, 'syn0_ngrams_lockf')

    def _leprobe_set_syn0_ngrams_lockf(self, value):
        handle_set(self._model, 'syn0_ngrams_lockf', value)

    syn0_ngrams_lockf = property(_leprobe_get_syn0_ngrams_lockf, _leprobe_set_syn0_ngrams_lockf)

    def _leprobe_get_syn0_vocab_lockf(self):
        return handle_get(self._model, 'syn0_vocab_lockf')

    def _leprobe_set_syn0_vocab_lockf(self, value):
        handle_set(self._model, 'syn0_vocab_lockf', value)

    syn0_vocab_lockf = property(_leprobe_get_syn0_vocab_lockf, _leprobe_set_syn0_vocab_lockf)

    def _leprobe_get_syn1(self):
        return handle_get(self._model, 'syn1')

    def _leprobe_set_syn1(self, value):
        handle_set(self._model, 'syn1', value)

    syn1 = property(_leprobe_get_syn1, _leprobe_set_syn1)

    def _leprobe_get_syn1neg(self):
        return handle_get(self._model, 'syn1neg')

    def _leprobe_set_syn1neg(self, value):
        handle_set(self._model, 'syn1neg', value)

    syn1neg = property(_leprobe_get_syn1neg, _leprobe_set_syn1neg)

    def _leprobe_get_total_train_time(self):
        return handle_get(self._model, 'total_train_time')

    def _leprobe_set_total_train_time(self, value):
        handle_set(self._model, 'total_train_time', value)

    total_train_time = property(_leprobe_get_total_train_time, _leprobe_set_total_train_time)

    def _leprobe_get_train_count(self):
        return handle_get(self._model, 'train_count')

    def _leprobe_set_train_count(self, value):
        handle_set(self._model, 'train_count', value)

    train_count = property(_leprobe_get_train_count, _leprobe_set_train_count)

    def _leprobe_get_trainables(self):
        return handle_get(self._model, 'trainables')

    def _leprobe_set_trainables(self, value):
        handle_set(self._model, 'trainables', value)

    trainables = property(_leprobe_get_trainables, _leprobe_set_trainables)

    def _leprobe_get_vector_size(self):
        return handle_get(self._model, 'vector_size')

    def _leprobe_set_vector_size(self, value):
        handle_set(self._model, 'vector_size', value)

    vector_size = property(_leprobe_get_vector_size, _leprobe_set_vector_size)

    def _leprobe_get_vocabulary(self):
        return handle_get(self._model, 'vocabulary')

    def _leprobe_set_vocabulary(self, value):
        handle_set(self._model, 'vocabulary', value)

    vocabulary = property(_leprobe_get_vocabulary, _leprobe_set_vocabulary)

    def _leprobe_get_window(self):
        return handle_get(self._model, 'window')

    def _leprobe_set_window(self, value):
        handle_set(self._model, 'window', value)

    window = property(_leprobe_get_window, _leprobe_set_window)

    def _leprobe_get_word_ngrams(self):
        return handle_get(self._model, 'word_ngrams')

    def _leprobe_set_word_ngrams(self, value):
        handle_set(self._model, 'word_ngrams', value)

    word_ngrams = property(_leprobe_get_word_ngrams, _leprobe_set_word_ngrams)

    def _leprobe_get_workers(self):
        return handle_get(self._model, 'workers')

    def _leprobe_set_workers(self, value):
        handle_set(self._model, 'workers', value)

    workers = property(_leprobe_get_workers, _leprobe_set_workers)

    def _leprobe_get_wv(self):
        return handle_get(self._model, 'wv')

    def _leprobe_set_wv(self, value):
        handle_set(self._model, 'wv', value)

    wv = property(_leprobe_get_wv, _leprobe_set_wv)

    def _adapt_by_suffix(self, *args, **kwargs):
        return handle_call(self._model, '_adapt_by_suffix', *args, **kwargs)

    def _check_input_data_sanity(self, *args, **kwargs):
        return handle_call(self._model, '_check_input_data_sanity', *args, **kwargs)

    def _check_training_sanity(self, *args, **kwargs):
        return handle_call(self._model, '_check_training_sanity', *args, **kwargs)

    def _clear_post_train(self, *args, **kwargs):
        return handle_call(self._model, '_clear_post_train', *args, **kwargs)

    def _do_train_epoch(self, *args, **kwargs):
        return handle_call(self._model, '_do_train_epoch', *args, **kwargs)

    def _do_train_job(self, *args, **kwargs):
        return handle_call(self._model, '_do_train_job', *args, **kwargs)

    def _get_job_params(self, *args, **kwargs):
        return handle_call(self._model, '_get_job_params', *args, **kwargs)

    def _get_thread_working_mem(self, *args, **kwargs):
        return handle_call(self._model, '_get_thread_working_mem', *args, **kwargs)

    def _job_producer(self, *args, **kwargs):
        return handle_call(self._model, '_job_producer', *args, **kwargs)

    def _load_dict(self, *args, **kwargs):
        return handle_call(self._model, '_load_dict', *args, **kwargs)

    def _load_model_params(self, *args, **kwargs):
        return handle_call(self._model, '_load_model_params', *args, **kwargs)

    def _load_specials(self, *args, **kwargs):
        return handle_call(self._model, '_load_specials', *args, **kwargs)

    def _load_vectors(self, *args, **kwargs):
        return handle_call(self._model, '_load_vectors', *args, **kwargs)

    def _log_epoch_end(self, *args, **kwargs):
        return handle_call(self._model, '_log_epoch_end', *args, **kwargs)

    def _log_epoch_progress(self, *args, **kwargs):
        return handle_call(self._model, '_log_epoch_progress', *args, **kwargs)

    def _log_progress(self, *args, **kwargs):
        return handle_call(self._model, '_log_progress', *args, **kwargs)

    def _log_train_end(self, *args, **kwargs):
        return handle_call(self._model, '_log_train_end', *args, **kwargs)

    def _raw_word_count(self, *args, **kwargs):
        return handle_call(self._model, '_raw_word_count', *args, **kwargs)

    def _save_specials(self, *args, **kwargs):
        return handle_call(self._model, '_save_specials', *args, **kwargs)

    def _set_train_params(self, *args, **kwargs):
        return handle_call(self._model, '_set_train_params', *args, **kwargs)

    def _smart_save(self, *args, **kwargs):
        return handle_call(self._model, '_smart_save', *args, **kwargs)

    def _train_epoch(self, *args, **kwargs):
        return handle_call(self._model, '_train_epoch', *args, **kwargs)

    def _train_epoch_corpusfile(self, *args, **kwargs):
        return handle_call(self._model, '_train_epoch_corpusfile', *args, **kwargs)

    def _update_job_params(self, *args, **kwargs):
        return handle_call(self._model, '_update_job_params', *args, **kwargs)

    def _worker_loop(self, *args, **kwargs):
        return handle_call(self._model, '_worker_loop', *args, **kwargs)

    def _worker_loop_corpusfile(self, *args, **kwargs):
        return handle_call(self._model, '_worker_loop_corpusfile', *args, **kwargs)

    def accuracy(self, *args, **kwargs):
        return handle_call(self._model, 'accuracy', *args, **kwargs)

    def build_vocab(self, *args, **kwargs):
        return handle_call(self._model, 'build_vocab', *args, **kwargs)

    def build_vocab_from_freq(self, *args, **kwargs):
        return handle_call(self._model, 'build_vocab_from_freq', *args, **kwargs)

    def clear_sims(self, *args, **kwargs):
        return handle_call(self._model, 'clear_sims', *args, **kwargs)

    def doesnt_match(self, *args, **kwargs):
        return handle_call(self._model, 'doesnt_match', *args, **kwargs)

    def estimate_memory(self, *args, **kwargs):
        return handle_call(self._model, 'estimate_memory', *args, **kwargs)

    def evaluate_word_pairs(self, *args, **kwargs):
        return handle_call(self._model, 'evaluate_word_pairs', *args, **kwargs)

    def hashfxn(self, *args, **kwargs):
        return handle_call(self._model, 'hashfxn', *args, **kwargs)

    def init_sims(self, *args, **kwargs):
        return handle_call(self._model, 'init_sims', *args, **kwargs)

    @classmethod
    def load(self, *args, **kwargs):
        return handle_call(self._model, 'load', *args, **kwargs)

    def load_binary_data(self, *args, **kwargs):
        return handle_call(self._model, 'load_binary_data', *args, **kwargs)

    @classmethod
    def load_fasttext_format(self, *args, **kwargs):
        return handle_call(self._model, 'load_fasttext_format', *args, **kwargs)

    def most_similar(self, *args, **kwargs):
        return handle_call(self._model, 'most_similar', *args, **kwargs)

    def most_similar_cosmul(self, *args, **kwargs):
        return handle_call(self._model, 'most_similar_cosmul', *args, **kwargs)

    def n_similarity(self, *args, **kwargs):
        return handle_call(self._model, 'n_similarity', *args, **kwargs)

    def save(self, *args, **kwargs):
        return handle_call(self._model, 'save', *args, **kwargs)

    def similar_by_vector(self, *args, **kwargs):
        return handle_call(self._model, 'similar_by_vector', *args, **kwargs)

    def similar_by_word(self, *args, **kwargs):
        return handle_call(self._model, 'similar_by_word', *args, **kwargs)

    def similarity(self, *args, **kwargs):
        return handle_call(self._model, 'similarity', *args, **kwargs)

    def struct_unpack(self, *args, **kwargs):
        return handle_call(self._model, 'struct_unpack', *args, **kwargs)

    def train(self, *args, **kwargs):
        return handle_call(self._model, 'train', *args, **kwargs)

    def wmdistance(self, *args, **kwargs):
        return handle_call(self._model, 'wmdistance', *args, **kwargs)


def train_gensim():
    from gensim.models.fasttext import FastText as FT_gensim
    from gensim.test.utils import datapath
    path = datapath('toy-data.txt')
    with open(path) as fin:
        words = fin.read().strip().split(' ')

    model = FT_gensim()
    model = Wrapper(model)
    model.build_vocab(words)
    model.train(words, total_examples=len(words), epochs=model.epochs)
    return model


if __name__ == '__main__':
    print('<log>')
    model = train_gensim()
    print('</log>')
    
