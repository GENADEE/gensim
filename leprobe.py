import inspect
import sys

from gensim.models.fasttext import FastText as FT_gensim
from gensim.test.utils import datapath


# https://gist.github.com/MacHu-GWU/0170849f693aa5f8d129aa03fc358305


def is_static_method(klass, attr, value=None):
    """Test if a value of a class is static method.

    example::

        class MyClass(object):
            @staticmethod
            def method():
                ...

    :param klass: the class
    :param attr: attribute name
    :param value: attribute value
    """
    if value is None:
        value = getattr(klass, attr)
    assert getattr(klass, attr) == value

    for cls in inspect.getmro(klass):
        if inspect.isroutine(value):
            if attr in cls.__dict__:
                binded_value = cls.__dict__[attr]
                if isinstance(binded_value, staticmethod):
                    return True
    return False


def is_class_method(klass, attr, value=None):
    """Test if a value of a class is class method.
    example::
        class MyClass(object):
            @classmethod
            def method(cls):
                ...
    :param klass: the class
    :param attr: attribute name
    :param value: attribute value
    """
    if value is None:
        value = getattr(klass, attr)
    assert getattr(klass, attr) == value

    for cls in inspect.getmro(klass):
        if inspect.isroutine(value):
            if attr in cls.__dict__:
                binded_value = cls.__dict__[attr]
                if isinstance(binded_value, classmethod):
                    return True
    return False


def train_gensim():
    path = datapath('toy-data.txt')
    with open(path) as fin:
        words = fin.read().strip().split(' ')

    model = FT_gensim()
    model.build_vocab(words)
    model.train(words, total_examples=len(words), epochs=model.epochs)
    return model


def is_callable(obj, attr):
    try:
        bound = getattr(obj, attr)
    except Exception:
        return False
    else:
        return callable(bound)


def is_dunder(a):
    return a.startswith('__') and a.endswith('__')


def probe(model):
    callables = [a for a in dir(model) if is_callable(model, a) and not is_dunder(a)]
    attrs = [a for a in dir(model) if a not in callables and not is_dunder(a)]
    return {'callables': callables, 'attrs': attrs}


def main():
    model = train_gensim()
    probe_result = probe(model)

    print("""# autogenerated by leprobe.py

def handle_get(obj, attr_name):
    print('<get attr=%r>' % attr_name, end='')
    value = getattr(obj, attr_name)
    print('%r</get>' % value)
    return value


def handle_set(obj, attr_name, value):
    print('<set attr=%r>%r' % (attr_name, value), end='')
    setattr(obj, attr_name, value)
    print('</set>')


def handle_call(obj, meth_name, *args, **kwargs):
    print('<call name="%s">' % meth_name)
    if args:
        for a in args:
            print('<arg>%r</arg>' % a)
    if kwargs:
        for k, v in kwargs.items():
            print('<kwarg name=%r>%r</kwarg>' % (k, v))
    value = getattr(obj, meth_name)(*args, **kwargs)
    print('<retval>%r</retval>' % value)
    print('</call>')
    return value


class Wrapper:
    def __init__(self, model):
        self._model = model
""")

    for attr in probe_result['attrs']:
        print("""\
    def _leprobe_get_%(attr)s(self):
        return handle_get(self._model, %(attr)r)

    def _leprobe_set_%(attr)s(self, value):
        handle_set(self._model, %(attr)r, value)

    %(attr)s = property(_leprobe_get_%(attr)s, _leprobe_set_%(attr)s)
""" % {'attr': attr})

    for clbl in probe_result['callables']:
        if is_class_method(FT_gensim, clbl):
            print('    @classmethod')
        print("""\
    def %(clbl)s(self, *args, **kwargs):
        return handle_call(self._model, %(clbl)r, *args, **kwargs)
""" % {'clbl': clbl})

    print("""
def train_gensim():
    from gensim.models.fasttext import FastText as FT_gensim
    from gensim.test.utils import datapath
    path = datapath('toy-data.txt')
    with open(path) as fin:
        words = fin.read().strip().split(' ')

    model = FT_gensim()
    model = Wrapper(model)
    model.build_vocab(words)
    model.train(words, total_examples=len(words), epochs=model.epochs)
    return model


if __name__ == '__main__':
    print('<log>')
    model = train_gensim()
    print('</log>')
    """)


if __name__ == '__main__':
    main()
